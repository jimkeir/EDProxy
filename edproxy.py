#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Wed Jun 10 12:56:29 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import edutils
import ednet
import edparser

class EDProxyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EDProxyFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, wx.ID_ANY, _("Netlog Path:"), style=wx.ST_NO_AUTORESIZE)
        self.netlog_path_txt_ctrl = wx.TextCtrl(self, wx.ID_ANY, _("/home/wes/src/edproxy/logs"))
        self.browse_button = wx.Button(self, wx.ID_ANY, _("Browse"))
        self.start_button = wx.Button(self, wx.ID_ANY, _("Start"))
        self.stop_button = wx.Button(self, wx.ID_ANY, _("Stop"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_browse, self.browse_button)
        self.Bind(wx.EVT_BUTTON, self.on_start, self.start_button)
        self.Bind(wx.EVT_BUTTON, self.on_stop, self.stop_button)
        # end wxGlade

        self.Bind(wx.EVT_CLOSE, self.on_win_close)

    def __set_properties(self):
        # begin wxGlade: EDProxyFrame.__set_properties
        self.SetTitle(_("Elite: Dangerous Netlog Proxy"))
        self.netlog_path_txt_ctrl.SetMinSize((467, 29))
        self.stop_button.Enable(False)
        # end wxGlade

        self._netlog_parser = edparser.EDNetlogParser()
        self._proxy_server = ednet.EDProxyServer(45550, self._netlog_parser)

    def __do_layout(self):
        # begin wxGlade: EDProxyFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.label_1, 0, 0, 0)
        sizer_4.Add(self.netlog_path_txt_ctrl, 1, 0, 0)
        sizer_4.Add(self.browse_button, 0, wx.ALIGN_RIGHT, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_5.Add(self.start_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(self.stop_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(sizer_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def on_browse(self, event):  # wxGlade: EDProxyFrame.<event_handler>
        dir_path = wx.DirDialog(self, "Choose Netlog Path", style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST)

        if dir_path.ShowModal() == wx.ID_OK:
            self.netlog_path_txt_ctrl.ChangeValue(dir_path.GetPath())

        dir_path.Destroy()

        event.Skip()

    def on_start(self, event):  # wxGlade: EDProxyFrame.<event_handler>
        self.start_button.Disable()
        self.browse_button.Disable()
        self.netlog_path_txt_ctrl.Disable()

        try:
            # Need to verify/find verbose logging xml
            # Need to automatically update xml IF ED *not* running.
            # If it is running then prompt user to close ED and try again.
            # If can't find it then prompt user for path?

            # Find xml here

            # Verify xml here
            print "Verify xml needs update here."
            needs_verbose_flag = False #True

            if needs_verbose_flag:
                while edutils.is_ed_running():
                    msg = wx.MessageDialog(parent = self,
                                           message = "Elite: Dangerous is currently running and Verbose logging will not take effect until Elite: Dangerous is restarted. Please shutdown Elite: Dangerous before continuing.",
                                           caption = "Verbose Logging Setup Error",
                                           style = wx.OK | wx.ICON_EXCLAMATIONN)
                    msg.ShowModal()
                    msg.Destroy()

                # Update xml here
                print "Update XML here"

            self._netlog_parser.start(self.netlog_path_txt_ctrl.GetValue())
            self._proxy_server.start(self.netlog_path_txt_ctrl.GetValue())

            self.stop_button.Enable()
        except:
            msg = wx.MessageDialog(parent = self,
                                   message = "Error starting up proxy server. Super generic error huh!? Welp, not really going to do better right now. Lazy, lazy, lazy.",
                                   caption = "Error starting proxy server",
                                   style = wx.OK | wx.ICON_ERROR)
            msg.ShowModal()
            msg.Destroy()

            self.stop_button.Disable()

            self._proxy_server.stop()
            self._netlog_parser.stop()

            self.netlog_path_txt_ctrl.Enable()
            self.browse_button.Enable()
            self.start_button.Enable()
            
        event.Skip()

    def on_stop(self, event):  # wxGlade: EDProxyFrame.<event_handler>
        self.stop_button.Disable()

        self._proxy_server.stop()
        self._netlog_parser.stop()

        self.netlog_path_txt_ctrl.Enable()
        self.browse_button.Enable()
        self.start_button.Enable()

        event.Skip()

    def on_win_close(self, event):
        if self.stop_button.IsEnabled():
            self._proxy_server.stop()
            self._netlog_parser.stop()

        event.Skip()

# end of class EDProxyFrame
class EDProxyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        ed_frame = EDProxyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(ed_frame)
        ed_frame.Show()
        return 1

# end of class EDProxyApp

if __name__ == "__main__":
    gettext.install("edproxy") # replace with the appropriate catalog name

    edproxy = EDProxyApp(0)
    edproxy.MainLoop()
